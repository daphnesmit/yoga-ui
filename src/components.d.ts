/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconOption, } from "./components/yoga-ui-icon/yoga-ui-icon";
import { IconOption as IconOption1, } from "./components/yoga-ui-icon/yoga-ui-icon";
export namespace Components {
    interface YogaUiButton {
        /**
          * If `true`, the button will be disabled. Defaults to `false`.
         */
        "disabled": boolean;
        /**
          * Adds a svg icon at the end
         */
        "endIcon": IconOption;
        /**
          * Set the size if the icon
         */
        "iconSize": string;
        /**
          * Adds a svg icon in front
         */
        "startIcon": IconOption;
        /**
          * The button variant. primary or secondary. Defaults to `primary`
         */
        "variant": string;
    }
    interface YogaUiCard {
        /**
          * Adds a category
         */
        "category": string;
        /**
          * If `true`, it will show a dots-handle button on the right. Defaults to `false`
         */
        "hasHandle": boolean;
    }
    interface YogaUiCategory {
    }
    interface YogaUiChartLegend {
        /**
          * The JSON stringified items to render
         */
        "items": string;
        /**
          * The parsed items to use in JSX. Computed value.
         */
        "parsedItems": Item[];
    }
    interface YogaUiCircleProgress {
        /**
          * If `true`, the text inside the circle will animate and count up. Defaults to `false`.
         */
        "animateText": boolean;
        /**
          * The percentage of the circle that should be filled, for example 75%
         */
        "percentage": number;
    }
    interface YogaUiClickable {
    }
    interface YogaUiCol {
        /**
          * The JSON stringified colums per breakpoint. Example: `cols="[12,6,4]"`
         */
        "cols": string | number;
        /**
          * The parsed cols to use in JSX. Computed value.
         */
        "parsedCols": number[];
    }
    interface YogaUiContainer {
    }
    interface YogaUiCta {
    }
    interface YogaUiDotsHandle {
    }
    interface YogaUiHeading {
        /**
          * The element to use for the heading.
         */
        "as": Heading;
        /**
          * Add margin bottom to the heading.
         */
        "spaceBottom": number;
        /**
          * The style to use for the heading. Example: Style a h2 as a h1 by adding styleAs
         */
        "styleAs": Heading;
        /**
          * The heading variant. Example: medium, bold or dark
         */
        "variant": string;
    }
    interface YogaUiIcon {
        /**
          * The icon color. Will render a modifier class, so if you send 'primary' it will become: `icon--primary`
         */
        "color": string;
        /**
          * The icon height
         */
        "height": string;
        /**
          * The icon to render. For example `calendar`
         */
        "icon": IconOption;
        /**
          * The icon width
         */
        "width": string;
    }
    interface YogaUiProgress {
        /**
          * The percentage of the circle that should be filled, for example 75%
         */
        "percentage": string;
    }
    interface YogaUiRow {
    }
    interface YogaUiSection {
    }
    interface YogaUiSpacer {
        /**
          * Margin
         */
        "m": number;
        /**
          * Margin left and padding right
         */
        "mx": number;
        /**
          * Margin top and padding bottom
         */
        "my": number;
        /**
          * Padding
         */
        "p": number;
        /**
          * Padding left and padding right
         */
        "px": number;
        /**
          * Padding top and padding bottom
         */
        "py": number;
    }
    interface YogaUiText {
        /**
          * The element to use for the text. Defaults to `span`
         */
        "as": Text;
        /**
          * The style to use for the text. Example: Style a p as a span by adding styleAs
         */
        "styleAs": Text;
        /**
          * The text variant. Will render a modifier class, so if you send 'primary' it will become: `text--primary`
         */
        "variant": string;
    }
}
declare global {
    interface HTMLYogaUiButtonElement extends Components.YogaUiButton, HTMLStencilElement {
    }
    var HTMLYogaUiButtonElement: {
        prototype: HTMLYogaUiButtonElement;
        new (): HTMLYogaUiButtonElement;
    };
    interface HTMLYogaUiCardElement extends Components.YogaUiCard, HTMLStencilElement {
    }
    var HTMLYogaUiCardElement: {
        prototype: HTMLYogaUiCardElement;
        new (): HTMLYogaUiCardElement;
    };
    interface HTMLYogaUiCategoryElement extends Components.YogaUiCategory, HTMLStencilElement {
    }
    var HTMLYogaUiCategoryElement: {
        prototype: HTMLYogaUiCategoryElement;
        new (): HTMLYogaUiCategoryElement;
    };
    interface HTMLYogaUiChartLegendElement extends Components.YogaUiChartLegend, HTMLStencilElement {
    }
    var HTMLYogaUiChartLegendElement: {
        prototype: HTMLYogaUiChartLegendElement;
        new (): HTMLYogaUiChartLegendElement;
    };
    interface HTMLYogaUiCircleProgressElement extends Components.YogaUiCircleProgress, HTMLStencilElement {
    }
    var HTMLYogaUiCircleProgressElement: {
        prototype: HTMLYogaUiCircleProgressElement;
        new (): HTMLYogaUiCircleProgressElement;
    };
    interface HTMLYogaUiClickableElement extends Components.YogaUiClickable, HTMLStencilElement {
    }
    var HTMLYogaUiClickableElement: {
        prototype: HTMLYogaUiClickableElement;
        new (): HTMLYogaUiClickableElement;
    };
    interface HTMLYogaUiColElement extends Components.YogaUiCol, HTMLStencilElement {
    }
    var HTMLYogaUiColElement: {
        prototype: HTMLYogaUiColElement;
        new (): HTMLYogaUiColElement;
    };
    interface HTMLYogaUiContainerElement extends Components.YogaUiContainer, HTMLStencilElement {
    }
    var HTMLYogaUiContainerElement: {
        prototype: HTMLYogaUiContainerElement;
        new (): HTMLYogaUiContainerElement;
    };
    interface HTMLYogaUiCtaElement extends Components.YogaUiCta, HTMLStencilElement {
    }
    var HTMLYogaUiCtaElement: {
        prototype: HTMLYogaUiCtaElement;
        new (): HTMLYogaUiCtaElement;
    };
    interface HTMLYogaUiDotsHandleElement extends Components.YogaUiDotsHandle, HTMLStencilElement {
    }
    var HTMLYogaUiDotsHandleElement: {
        prototype: HTMLYogaUiDotsHandleElement;
        new (): HTMLYogaUiDotsHandleElement;
    };
    interface HTMLYogaUiHeadingElement extends Components.YogaUiHeading, HTMLStencilElement {
    }
    var HTMLYogaUiHeadingElement: {
        prototype: HTMLYogaUiHeadingElement;
        new (): HTMLYogaUiHeadingElement;
    };
    interface HTMLYogaUiIconElement extends Components.YogaUiIcon, HTMLStencilElement {
    }
    var HTMLYogaUiIconElement: {
        prototype: HTMLYogaUiIconElement;
        new (): HTMLYogaUiIconElement;
    };
    interface HTMLYogaUiProgressElement extends Components.YogaUiProgress, HTMLStencilElement {
    }
    var HTMLYogaUiProgressElement: {
        prototype: HTMLYogaUiProgressElement;
        new (): HTMLYogaUiProgressElement;
    };
    interface HTMLYogaUiRowElement extends Components.YogaUiRow, HTMLStencilElement {
    }
    var HTMLYogaUiRowElement: {
        prototype: HTMLYogaUiRowElement;
        new (): HTMLYogaUiRowElement;
    };
    interface HTMLYogaUiSectionElement extends Components.YogaUiSection, HTMLStencilElement {
    }
    var HTMLYogaUiSectionElement: {
        prototype: HTMLYogaUiSectionElement;
        new (): HTMLYogaUiSectionElement;
    };
    interface HTMLYogaUiSpacerElement extends Components.YogaUiSpacer, HTMLStencilElement {
    }
    var HTMLYogaUiSpacerElement: {
        prototype: HTMLYogaUiSpacerElement;
        new (): HTMLYogaUiSpacerElement;
    };
    interface HTMLYogaUiTextElement extends Components.YogaUiText, HTMLStencilElement {
    }
    var HTMLYogaUiTextElement: {
        prototype: HTMLYogaUiTextElement;
        new (): HTMLYogaUiTextElement;
    };
    interface HTMLElementTagNameMap {
        "yoga-ui-button": HTMLYogaUiButtonElement;
        "yoga-ui-card": HTMLYogaUiCardElement;
        "yoga-ui-category": HTMLYogaUiCategoryElement;
        "yoga-ui-chart-legend": HTMLYogaUiChartLegendElement;
        "yoga-ui-circle-progress": HTMLYogaUiCircleProgressElement;
        "yoga-ui-clickable": HTMLYogaUiClickableElement;
        "yoga-ui-col": HTMLYogaUiColElement;
        "yoga-ui-container": HTMLYogaUiContainerElement;
        "yoga-ui-cta": HTMLYogaUiCtaElement;
        "yoga-ui-dots-handle": HTMLYogaUiDotsHandleElement;
        "yoga-ui-heading": HTMLYogaUiHeadingElement;
        "yoga-ui-icon": HTMLYogaUiIconElement;
        "yoga-ui-progress": HTMLYogaUiProgressElement;
        "yoga-ui-row": HTMLYogaUiRowElement;
        "yoga-ui-section": HTMLYogaUiSectionElement;
        "yoga-ui-spacer": HTMLYogaUiSpacerElement;
        "yoga-ui-text": HTMLYogaUiTextElement;
    }
}
declare namespace LocalJSX {
    interface YogaUiButton {
        /**
          * If `true`, the button will be disabled. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * Adds a svg icon at the end
         */
        "endIcon"?: IconOption;
        /**
          * Set the size if the icon
         */
        "iconSize"?: string;
        /**
          * Adds a svg icon in front
         */
        "startIcon"?: IconOption;
        /**
          * The button variant. primary or secondary. Defaults to `primary`
         */
        "variant"?: string;
    }
    interface YogaUiCard {
        /**
          * Adds a category
         */
        "category"?: string;
        /**
          * If `true`, it will show a dots-handle button on the right. Defaults to `false`
         */
        "hasHandle"?: boolean;
        "onHandleClick"?: (event: CustomEvent<any>) => void;
    }
    interface YogaUiCategory {
    }
    interface YogaUiChartLegend {
        /**
          * The JSON stringified items to render
         */
        "items"?: string;
        /**
          * The parsed items to use in JSX. Computed value.
         */
        "parsedItems"?: Item[];
    }
    interface YogaUiCircleProgress {
        /**
          * If `true`, the text inside the circle will animate and count up. Defaults to `false`.
         */
        "animateText"?: boolean;
        "onLoadEvent"?: (event: CustomEvent<any>) => void;
        /**
          * The percentage of the circle that should be filled, for example 75%
         */
        "percentage"?: number;
    }
    interface YogaUiClickable {
    }
    interface YogaUiCol {
        /**
          * The JSON stringified colums per breakpoint. Example: `cols="[12,6,4]"`
         */
        "cols"?: string | number;
        /**
          * The parsed cols to use in JSX. Computed value.
         */
        "parsedCols"?: number[];
    }
    interface YogaUiContainer {
    }
    interface YogaUiCta {
        "onButtonClick"?: (event: CustomEvent<any>) => void;
    }
    interface YogaUiDotsHandle {
    }
    interface YogaUiHeading {
        /**
          * The element to use for the heading.
         */
        "as": Heading;
        /**
          * Add margin bottom to the heading.
         */
        "spaceBottom"?: number;
        /**
          * The style to use for the heading. Example: Style a h2 as a h1 by adding styleAs
         */
        "styleAs"?: Heading;
        /**
          * The heading variant. Example: medium, bold or dark
         */
        "variant"?: string;
    }
    interface YogaUiIcon {
        /**
          * The icon color. Will render a modifier class, so if you send 'primary' it will become: `icon--primary`
         */
        "color"?: string;
        /**
          * The icon height
         */
        "height"?: string;
        /**
          * The icon to render. For example `calendar`
         */
        "icon": IconOption;
        /**
          * The icon width
         */
        "width"?: string;
    }
    interface YogaUiProgress {
        /**
          * The percentage of the circle that should be filled, for example 75%
         */
        "percentage": string;
    }
    interface YogaUiRow {
    }
    interface YogaUiSection {
    }
    interface YogaUiSpacer {
        /**
          * Margin
         */
        "m"?: number;
        /**
          * Margin left and padding right
         */
        "mx"?: number;
        /**
          * Margin top and padding bottom
         */
        "my"?: number;
        /**
          * Padding
         */
        "p"?: number;
        /**
          * Padding left and padding right
         */
        "px"?: number;
        /**
          * Padding top and padding bottom
         */
        "py"?: number;
    }
    interface YogaUiText {
        /**
          * The element to use for the text. Defaults to `span`
         */
        "as"?: Text;
        /**
          * The style to use for the text. Example: Style a p as a span by adding styleAs
         */
        "styleAs"?: Text;
        /**
          * The text variant. Will render a modifier class, so if you send 'primary' it will become: `text--primary`
         */
        "variant"?: string;
    }
    interface IntrinsicElements {
        "yoga-ui-button": YogaUiButton;
        "yoga-ui-card": YogaUiCard;
        "yoga-ui-category": YogaUiCategory;
        "yoga-ui-chart-legend": YogaUiChartLegend;
        "yoga-ui-circle-progress": YogaUiCircleProgress;
        "yoga-ui-clickable": YogaUiClickable;
        "yoga-ui-col": YogaUiCol;
        "yoga-ui-container": YogaUiContainer;
        "yoga-ui-cta": YogaUiCta;
        "yoga-ui-dots-handle": YogaUiDotsHandle;
        "yoga-ui-heading": YogaUiHeading;
        "yoga-ui-icon": YogaUiIcon;
        "yoga-ui-progress": YogaUiProgress;
        "yoga-ui-row": YogaUiRow;
        "yoga-ui-section": YogaUiSection;
        "yoga-ui-spacer": YogaUiSpacer;
        "yoga-ui-text": YogaUiText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "yoga-ui-button": LocalJSX.YogaUiButton & JSXBase.HTMLAttributes<HTMLYogaUiButtonElement>;
            "yoga-ui-card": LocalJSX.YogaUiCard & JSXBase.HTMLAttributes<HTMLYogaUiCardElement>;
            "yoga-ui-category": LocalJSX.YogaUiCategory & JSXBase.HTMLAttributes<HTMLYogaUiCategoryElement>;
            "yoga-ui-chart-legend": LocalJSX.YogaUiChartLegend & JSXBase.HTMLAttributes<HTMLYogaUiChartLegendElement>;
            "yoga-ui-circle-progress": LocalJSX.YogaUiCircleProgress & JSXBase.HTMLAttributes<HTMLYogaUiCircleProgressElement>;
            "yoga-ui-clickable": LocalJSX.YogaUiClickable & JSXBase.HTMLAttributes<HTMLYogaUiClickableElement>;
            "yoga-ui-col": LocalJSX.YogaUiCol & JSXBase.HTMLAttributes<HTMLYogaUiColElement>;
            "yoga-ui-container": LocalJSX.YogaUiContainer & JSXBase.HTMLAttributes<HTMLYogaUiContainerElement>;
            "yoga-ui-cta": LocalJSX.YogaUiCta & JSXBase.HTMLAttributes<HTMLYogaUiCtaElement>;
            "yoga-ui-dots-handle": LocalJSX.YogaUiDotsHandle & JSXBase.HTMLAttributes<HTMLYogaUiDotsHandleElement>;
            "yoga-ui-heading": LocalJSX.YogaUiHeading & JSXBase.HTMLAttributes<HTMLYogaUiHeadingElement>;
            "yoga-ui-icon": LocalJSX.YogaUiIcon & JSXBase.HTMLAttributes<HTMLYogaUiIconElement>;
            "yoga-ui-progress": LocalJSX.YogaUiProgress & JSXBase.HTMLAttributes<HTMLYogaUiProgressElement>;
            "yoga-ui-row": LocalJSX.YogaUiRow & JSXBase.HTMLAttributes<HTMLYogaUiRowElement>;
            "yoga-ui-section": LocalJSX.YogaUiSection & JSXBase.HTMLAttributes<HTMLYogaUiSectionElement>;
            "yoga-ui-spacer": LocalJSX.YogaUiSpacer & JSXBase.HTMLAttributes<HTMLYogaUiSpacerElement>;
            "yoga-ui-text": LocalJSX.YogaUiText & JSXBase.HTMLAttributes<HTMLYogaUiTextElement>;
        }
    }
}
